{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Weave-enabled AWS CloudFormation template to create resources required to run tasks on an ECS cluster.",
    "Outputs": {
        "AppFrontend": {
            "Condition": "DoDeployExampleApp",
            "Value": {
                "Fn::Join": [
                    "", [
                        "http://", {
                            "Fn::GetAtt": [
                                "EcsFrontendElasticLoadBalancing",
                                "DNSName"
                            ]
                        },
                        ":80"
                    ]
                ]
            },
            "Description": "App frontend"
        },
        "AppZipkin": {
            "Condition": "DoDeployExampleApp",
            "Value": {
                "Fn::Join": [
                    "", [
                        "http://", {
                            "Fn::GetAtt": [
                                "EcsZipkinElasticLoadBalancing",
                                "DNSName"
                            ]
                        },
                        ":9411"
                    ]
                ]
            },
            "Description": "Zipkin UI"
        },
        "WeaveScope": {
            "Condition": "UseWeaveScopeStandalone",
            "Value": {
                "Fn::Join": [
                    "", [
                        "http://", {
                            "Fn::GetAtt": [
                                "EcsScopeApplicationLoadBalancing",
                                "DNSName"
                            ]
                        },
                        ":80"
                    ]
                ]
            },
            "Description": "Weave Scope UI"
        }
    },
    "Mappings": {
        "VpcCidrs": {
            "vpc": {
                "cidr": "172.31.0.0/16"
            },
            "pubsubnet1": {
                "cidr": "172.31.0.0/24"
            },
            "pubsubnet2": {
                "cidr": "172.31.1.0/24"
            }
        },
        "WeaveworksEcsAmiIds": {
            "us-east-1": {
                "ImageId": "ami-eca289fb"
            },
            "us-east-2": {
                "ImageId": "ami-446f3521"
            },
            "us-west-1": {
                "ImageId": "ami-9fadf8ff"
            },
            "us-west-2": {
                "ImageId": "ami-7abc111a"
            },
            "eu-west-1": {
                "ImageId": "ami-a1491ad2"
            },
            "eu-central-1": {
                "ImageId": "ami-54f5303b"
            },
            "ap-northeast-1": {
                "ImageId": "ami-9cd57ffd"
            },
            "ap-southeast-1": {
                "ImageId": "ami-a900a3ca"
            },
            "ap-southeast-2": {
                "ImageId": "ami-5781be34"
            }
        },
        "SqlImporterAmiIds": {
            "us-east-1": {
                "ImageId": "ami-0b33d91d"
            },
            "us-east-2": {
                "ImageId": "ami-c55673a0"
            },
            "us-west-1": {
                "ImageId": "ami-f173cc91"
            },
            "us-west-2": {
                "ImageId": "ami-165a0876"
            },
            "eu-west-1": {
                "ImageId": "ami-70edb016"
            },
            "eu-central-1": {
                "ImageId": "ami-af0fc0c0"
            },
            "ap-northeast-1": {
                "ImageId": "ami-56d4ad31"
            },
            "ap-southeast-1": {
                "ImageId": "ami-dc9339bf"
            },
            "ap-southeast-2": {
                "ImageId": "ami-1c47407f"
            }
        }
    },
    "Parameters": {
        "EcsInstanceType": {
            "Type": "String",
            "Description": "Type of the EC2 instance(s) to deploy",
            "Default": "t2.xlarge",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "Scale": {
            "Type": "Number",
            "Description": "Size of ECS cluster",
            "Default": "4"
        },
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances (if none appear in drop-down menu, you need to create one)",
            "MinLength": "1",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "DeployExampleApp": {
            "Type": "String",
            "Description": "No: only Weave Net/Scope net will be deployed, Yes: also deploy microservices demo app",
            "Default": "Yes",
            "AllowedValues": [
                "Yes",
                "No"
            ],
            "ConstraintDescription": "must be Yes or No"
        },
        "WeaveCloudServiceToken": {
            "Type": "String",
            "Description": "Optional - Authentication token for Weave Cloud [https://cloud.weave.works/]. Leave empty to run Scope in Standalone Mode.",
            "Default": ""
        }
    },
    "Conditions": {
        "DoDeployExampleApp": {
            "Fn::Equals": [{
                    "Ref": "DeployExampleApp"
                },
                "Yes"
            ]
        },
        "UseWeaveScopeStandalone": {
            "Fn::Equals": [{
                    "Ref": "WeaveCloudServiceToken"
                },
                ""
            ]
        }
    },
    "Resources": {
        "EcsCluster": {
            "Type": "AWS::ECS::Cluster"
        },
        "CartsDBTask": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Essential": true,
                    "Image": "mongo",
                    "Name": "carts-db",
 		    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": { "Ref": "AWS::StackName"  },
                            "awslogs-region": {
			        "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "carts-db"
                         }
                    },
                    "Memory": 128
                }],
                "Volumes": []
            }
        },
        "CartsDBService": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "EcsCluster"
                },
                "DesiredCount": 1,
                "TaskDefinition": {
                    "Ref": "CartsDBTask"
                }
            }
        },
        "CartsTask": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Essential": true,
                    "Image": "weaveworksdemos/carts",
                    "Name": "carts",
 		    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": { "Ref": "AWS::StackName"  },
                            "awslogs-region": {
			        "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "carts"
                         }
                    },
                    "Memory": 1024
                }],
                "Volumes": []
            }
        },
        "CartsService": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "EcsCluster"
                },
                "DesiredCount": 3,
                "TaskDefinition": {
                    "Ref": "CartsTask"
                }
            }
        },
        "CatalogueTask": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Essential": true,
                    "Image": "weaveworksdemos/catalogue",
                    "Name": "catalogue",
                    "Memory": 32,
                    "Command": [
                        "/app",
                        "-port=80", {
                            "Fn::Join": ["", [
                                "-DSN=",
                                "catalogue_user:default_password@tcp(",
                                {
                                    "Fn::GetAtt": ["CatalogueRDS", "Endpoint.Address"]
                                },
                                ":",
                                {
                                    "Fn::GetAtt": ["CatalogueRDS", "Endpoint.Port"]
                                },
                                ")/socksdb"
                            ]]
                        }
                    ],
 		    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": { "Ref": "AWS::StackName"  },
                            "awslogs-region": {
			        "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "catalogue"
                         }
                    },
                    "Environment": [{
                        "Name": "ZIPKIN",
                        "Value": "http://zipkin:9411/api/v1/spans"
                    }]
                }],
                "Volumes": []
            }
        },
        "CatalogueService": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "EcsCluster"
                },
                "DesiredCount": 3,
                "TaskDefinition": {
                    "Ref": "CatalogueTask"
                }
            },
            "DependsOn": "SQLImporter"
        },
        "FrontEndTask": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Essential": true,
                    "Image": "weaveworksdemos/front-end",
                    "Name": "front-end",
 		    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": { "Ref": "AWS::StackName"  },
                            "awslogs-region": {
			        "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "frontend"
                         }
                    },
                    "Memory": 256,
                    "Environment": [{
                        "Name": "SESSION_REDIS",
                        "Value": "true"
                    }],
                    "PortMappings": [{
                        "HostPort": 80,
                        "ContainerPort": 8079
                    }]
                }],
                "Volumes": []
            }
        },
        "SessionDBTask": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Essential": true,
                    "Image": "redis:alpine",
                    "Name": "session-db",
                    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": { "Ref": "AWS::StackName"  },
                            "awslogs-region": {
			        "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "session-db"
                         }
                    },
                    "Memory": 256
                }],
                "Volumes": []
            }
        },
        "SessionDBService": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "EcsCluster"
                },
                "DesiredCount": 1,
                "TaskDefinition": {
                    "Ref": "SessionDBTask"
                }
            }
        },
        "FrontEndService": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "EcsCluster"
                },
                "DesiredCount": 3,
                "TaskDefinition": {
                    "Ref": "FrontEndTask"
                }
            }
        },
        "UserTask": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Essential": true,
                    "Image": "weaveworksdemos/user",
                    "Name": "user",
                    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": { "Ref": "AWS::StackName"  },
                            "awslogs-region": {
			        "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "user"
                         }
                    },
                    "Memory": 32,
                    "Environment": [{
                        "Name": "ZIPKIN",
                        "Value": "http://zipkin:9411/api/v1/spans"
                    }]
                }],
                "Volumes": []
            }
        },
        "UserService": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "EcsCluster"
                },
                "DesiredCount": 3,
                "TaskDefinition": {
                    "Ref": "UserTask"
                }
            }
        },
        "UserDBTask": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Essential": true,
                    "Image": "weaveworksdemos/user-db",
                    "Name": "user-db",
 		    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": { "Ref": "AWS::StackName"  },
                            "awslogs-region": {
			        "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "user-db"
                         }
                    },
                    "Memory": 128
                }],
                "Volumes": []
            }
        },
        "UserDBService": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "EcsCluster"
                },
                "DesiredCount": 1,
                "TaskDefinition": {
                    "Ref": "UserDBTask"
                }
            }
        },
        "OrdersTask": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Essential": true,
                    "Image": "weaveworksdemos/orders-aws",
                    "Name": "orders",
                    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": { "Ref": "AWS::StackName"  },
                            "awslogs-region": {
                                "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "orders"
                         }
                    },
                    "Memory": 1024,
                    "Environment": [{
                        "Name": "AWS_DYNAMODB_ENDPOINT",
                        "Value": {
                            "Fn::Join": [
                                "", [
                                    "dynamodb.",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    ".amazonaws.com"
                                ]
                            ]
                        }
                    }]
                }],
                "Volumes": []
            }
        },
        "OrdersService": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "EcsCluster"
                },
                "DesiredCount": 3,
                "TaskDefinition": {
                    "Ref": "OrdersTask"
                }
            }
        },
        "PaymentTask": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Essential": true,
                    "Image": "weaveworksdemos/payment",
                    "Name": "payment",
 		    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": { "Ref": "AWS::StackName"  },
                            "awslogs-region": {
			        "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "payment"
                         }
                    },
                    "Memory": 32,
                    "Environment": [{
                        "Name": "ZIPKIN",
                        "Value": "http://zipkin:9411/api/v1/spans"
                    }]
                }],
                "Volumes": []
            }
        },
        "PaymentService": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "EcsCluster"
                },
                "DesiredCount": 3,
                "TaskDefinition": {
                    "Ref": "PaymentTask"
                }
            }
        },
        "QueueMasterTask": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Essential": true,
                    "Image": "weaveworksdemos/queue-master",
                    "Name": "queue-master",
 		    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": { "Ref": "AWS::StackName"  },
                            "awslogs-region": {
			        "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "queue-master"
                         }
                    },
                    "Memory": 768,
                    "MountPoints": [{
                        "ContainerPath": "/var/run/docker.sock",
                        "SourceVolume": "VarRunDocker_Sock"
                    }]
                }],
                "Volumes": [{
                    "Host": {
                        "SourcePath": "/var/run/docker.sock"
                    },
                    "Name": "VarRunDocker_Sock"
                }]
            }
        },
        "QueueMasterService": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "EcsCluster"
                },
                "DesiredCount": 3,
                "TaskDefinition": {
                    "Ref": "QueueMasterTask"
                }
            }
        },
        "RabbitMQTask": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Essential": true,
                    "Image": "rabbitmq:3.6.8",
                    "Name": "rabbitmq",
 		    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": { "Ref": "AWS::StackName"  },
                            "awslogs-region": {
			        "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "rabbitmq"
                         }
                    },
                    "Memory": 128
                }],
                "Volumes": []
            }
        },
        "RabbitMQService": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "EcsCluster"
                },
                "DesiredCount": 1,
                "TaskDefinition": {
                    "Ref": "RabbitMQTask"
                }
            }
        },
        "ShippingTask": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Essential": true,
                    "Image": "weaveworksdemos/shipping",
                    "Name": "shipping",
 		    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": { "Ref": "AWS::StackName"  },
                            "awslogs-region": {
			        "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "shipping"
                         }
                    },
                    "Memory": 1024
                }],
                "Volumes": []
            }
        },
        "ShippingService": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "EcsCluster"
                },
                "DesiredCount": 3,
                "TaskDefinition": {
                    "Ref": "ShippingTask"
                }
            }
        },
        "ZipkinTask": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Essential": true,
                    "Image": "openzipkin/zipkin",
                    "Name": "zipkin",
                    "Memory": 1024,
 		    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": { "Ref": "AWS::StackName"  },
                            "awslogs-region": {
			        "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "zipkin"
                         }
                    },
                    "PortMappings": [{
                        "HostPort": 9411,
                        "ContainerPort": 9411
                    }],
                    "Environment": [{
                            "Name": "STORAGE_TYPE",
                            "Value": "mysql"
                        },
                        {
                            "Name": "MYSQL_HOST",
                            "Value": "zipkin-mysql"
                        }
                    ]
                }],
                "Volumes": []
            }
        },
        "ZipkinService": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "EcsCluster"
                },
                "DesiredCount": 1,
                "TaskDefinition": {
                    "Ref": "ZipkinTask"
                }
            },
            "DependsOn": "ZipkinDBService"
        },
        "ZipkinCronTask": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Essential": true,
                    "Image": "openzipkin/zipkin-dependencies",
                    "Name": "zipkin-cron",
                    "Memory": 1024,
 		    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": { "Ref": "AWS::StackName"  },
                            "awslogs-region": {
			        "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "zipkin-cron"
                         }
                    },
                    "Environment": [{
                            "Name": "STORAGE_TYPE",
                            "Value": "mysql"
                        },
                        {
                            "Name": "MYSQL_HOST",
                            "Value": "zipkin-mysql"
                        },
                        {
                            "Name": "MYSQL_USER",
                            "Value": "zipkin"
                        },
                        {
                            "Name": "MYSQL_PASS",
                            "Value": "zipkin"
                        }
                    ],
                    "EntryPoint" : ["crond", "-f"]
                }],
                "Volumes": []
            }
        },
        "ZipkinCronService": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "EcsCluster"
                },
                "DesiredCount": 1,
                "TaskDefinition": {
                    "Ref": "ZipkinCronTask"
                }
            },
            "DependsOn": "ZipkinDBService"
        },
        "ZipkinDBTask": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [{
                    "Essential": true,
                    "Image": "openzipkin/zipkin-mysql",
                    "Name": "zipkin-mysql",
 		    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": { "Ref": "AWS::StackName"  },
                            "awslogs-region": {
			        "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "zipkin-db"
                         }
                    },
                    "Memory": 1024
                }],
                "Volumes": []
            }
        },
        "ZipkinDBService": {
            "Condition": "DoDeployExampleApp",
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "EcsCluster"
                },
                "DesiredCount": 1,
                "TaskDefinition": {
                    "Ref": "ZipkinDBTask"
                }
            }
        },
        "Vpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "VpcCidrs",
                        "vpc",
                        "cidr"
                    ]
                }
            }
        },
        "PubSubnetAz1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "VpcCidrs",
                        "pubsubnet1",
                        "cidr"
                    ]
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0", {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                }
            }
        },
        "PubSubnetAz2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "VpcCidrs",
                        "pubsubnet2",
                        "cidr"
                    ]
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1", {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                }
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "RouteViaIgw": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "PublicRouteViaIgw": {
            "DependsOn": "AttachGateway",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PubSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PubSubnetAz1"
                },
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                }
            }
        },
        "PubSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PubSubnetAz2"
                },
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                }
            }
        },
        "EcsSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ECS Allowed Ports",
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "EcsSecurityGroupIngressAppPort": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EcsSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "EcsSecurityGroupIngressSshPort": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EcsSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "EcsSecurityGroupIngressZipkinExtPort": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EcsSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "9411",
                "ToPort": "9411",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "EcsSecurityGroupIngressWeaveScopeExtPort": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EcsSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "4040",
                "ToPort": "4040",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "EcsSecurityGroupIngressWeaveScopeIntPort": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EcsSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "4040",
                "ToPort": "4040",
                "SourceSecurityGroupId": {
                    "Ref": "EcsSecurityGroup"
                }
            }
        },
        "EcsSecurityGroupIngressWeaveNetIntTcpPort": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EcsSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "6783",
                "ToPort": "6783",
                "SourceSecurityGroupId": {
                    "Ref": "EcsSecurityGroup"
                }
            }
        },
        "EcsSecurityGroupIngressWeaveNetIntUdpPorts": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EcsSecurityGroup"
                },
                "IpProtocol": "udp",
                "FromPort": "6783",
                "ToPort": "6784",
                "SourceSecurityGroupId": {
                    "Ref": "EcsSecurityGroup"
                }
            }
        },
        "EcsInstancePolicy": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
                ],
                "Policies": [{
                    "PolicyName": "ClusterInstanceRole",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:Submit*",
                                "ecs:ListClusters",
                                "ecs:ListContainerInstances",
                                "ecs:DescribeContainerInstances",
                                "ecs:ListServices",
                                "ecs:DescribeTasks",
                                "ecs:DescribeServices",
                                "ec2:DescribeInstances",
                                "ec2:DescribeTags",
                                "ecs:StartTelemetrySession",
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "logs:DescribeLogStreams",
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:GetItem",
                                "dynamodb:PutItem",
                                "dynamodb:GetRecords",
                                "dynamodb:DeleteItem",
                                "dynamodb:ListTables",
                                "dynamodb:Query",
                                "dynamodb:Scan",
                                "dynamodb:UpdateItem",
                                "dynamodb:DescribeTable",
                                "autoscaling:DescribeAutoScalingInstances"
                            ],
                            "Resource": [
                                "*"
                            ]
                        }]
                    }
                }]
            }
        },
        "EcsInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [{
                    "Ref": "EcsInstancePolicy"
                }]
            }
        },
        "EcsInstanceLc": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "WeaveworksEcsAmiIds", {
                            "Ref": "AWS::Region"
                        },
                        "ImageId"
                    ]
                },
                "InstanceType": {
                    "Ref": "EcsInstanceType"
                },
                "AssociatePublicIpAddress": true,
                "IamInstanceProfile": {
                    "Ref": "EcsInstanceProfile"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroups": [{
                    "Ref": "EcsSecurityGroup"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n", [
                                "#!/bin/bash -ex",
                                "yum install -y aws-cfn-bootstrap", {
                                    "Fn::Join": [
                                        " ", [
                                            "/opt/aws/bin/cfn-init",
                                            "--verbose",
                                            "--stack", {
                                                "Ref": "AWS::StackName"
                                            },
                                            "--region", {
                                                "Ref": "AWS::Region"
                                            },
                                            "--resource",
                                            "EcsInstanceLc"
                                        ]
                                    ]
                                }, {
                                    "Fn::Join": [
                                        " ", [
                                            "/opt/aws/bin/cfn-signal",
                                            "--stack", {
                                                "Ref": "AWS::StackName"
                                            },
                                            "--region", {
                                                "Ref": "AWS::Region"
                                            },
                                            "--resource",
                                            "EcsInstanceAsg"
                                        ]
                                    ]
                                }
                            ]
                        ]
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "jq": []
                            },
                            "python": {
                                "awscli": []
                            }
                        },
                        "files": {
                            "/etc/ecs/ecs.config": {
                                "content": {
                                    "Fn::Join": [
                                        "", [
                                            "ECS_CLUSTER=", {
                                                "Ref": "EcsCluster"
                                            }
                                        ]
                                    ]
                                }
                            },
                            "/etc/weave/scope.config": {
                                "content": {
                                    "Fn::Join": [
                                        "", [{
                                            "Fn::If": [
                                                "UseWeaveScopeStandalone",
                                                "## SERVICE_TOKEN=",
                                                "SERVICE_TOKEN="
                                            ]
                                        }, {
                                            "Fn::If": [
                                                "UseWeaveScopeStandalone",
                                                "<unset>", {
                                                    "Ref": "WeaveCloudServiceToken"
                                                }
                                            ]
                                        }]
                                    ]
                                }
                            },
                            "/etc/init/ecs.override": {
                                "source": "https://raw.github.com/weaveworks/integrations/master/aws/ecs/packer/to-upload/ecs.override"
                            },
                            "/etc/init/weave.conf": {
                                "source": "https://raw.github.com/weaveworks/integrations/master/aws/ecs/packer/to-upload/weave.conf"
                            },
                            "/etc/init/scope.conf": {
                                "source": "https://raw.github.com/weaveworks/integrations/master/aws/ecs/packer/to-upload/scope.conf"
                            },
                            "/etc/weave/run.sh": {
                                "source": "https://raw.github.com/weaveworks/integrations/master/aws/ecs/packer/to-upload/run.sh",
                                "mode": "000755"
                            },
                            "/etc/weave/peers.sh": {
                                "source": "https://raw.github.com/weaveworks/integrations/master/aws/ecs/packer/to-upload/peers.sh",
                                "mode": "000755"
                            },
                            "/usr/local/bin/weave": {
                                "source": {
                                    "Fn::Join": [
                                        "/", [
                                            "https://github.com/weaveworks/weave/releases/download",
                                            "v1.8.0",
                                            "weave"
                                        ]
                                    ]
                                },
                                "mode": "000755"
                            },
                            "/usr/local/bin/scope": {
                                "source": {
                                    "Fn::Join": [
                                        "/", [
                                            "https://github.com/weaveworks/scope/releases/download",
                                            "v1.1.0",
                                            "scope"
                                        ]
                                    ]
                                },
                                "mode": "000755"
                            }
                        }
                    }
                }
            }
        },
        "EcsInstanceAsg": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [{
                    "Fn::Join": [
                        ",", [{
                            "Ref": "PubSubnetAz1"
                        }, {
                            "Ref": "PubSubnetAz2"
                        }]
                    ]
                }],
                "LaunchConfigurationName": {
                    "Ref": "EcsInstanceLc"
                },
                "MinSize": "1",
                "MaxSize": {
                    "Ref": "Scale"
                },
                "DesiredCapacity": {
                    "Ref": "Scale"
                },
                "LoadBalancerNames": [{
                    "Ref": "EcsFrontendElasticLoadBalancing"
                }, {
                    "Ref": "EcsZipkinElasticLoadBalancing"
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "", [
                                "ECS Instance - ", {
                                    "Ref": "AWS::StackName"
                                }
                            ]
                        ]
                    },
                    "PropagateAtLaunch": "true"
                }],
                "TargetGroupARNs": [{
                        "Ref": "EcsScopeTargetGroup"
                }]
            }
        },
        "EcsFrontendElasticLoadBalancing": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "DependsOn": "InternetGateway",
            "Properties": {
                "Listeners": [{
                    "Fn::If": [
                        "DoDeployExampleApp", {
                            "InstancePort": "80",
                            "LoadBalancerPort": "80",
                            "InstanceProtocol": "HTTP",
                            "Protocol": "HTTP",
                            "PolicyNames": ["weave-sticky-cookie-policy"]
                        }, {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }],
                "SecurityGroups": [{
                    "Ref": "EcsSecurityGroup"
                }],
                "Subnets": [{
                    "Ref": "PubSubnetAz1"
                }, {
                    "Ref": "PubSubnetAz2"
                }],
                "AppCookieStickinessPolicy": [{
                    "CookieName": "md.sid",
                    "PolicyName": "weave-sticky-cookie-policy"
                }]
            }
        },
        "EcsZipkinElasticLoadBalancing": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "DependsOn": "InternetGateway",
            "Properties": {
                "Listeners": [{
                    "Fn::If": [
                        "DoDeployExampleApp", {
                            "InstancePort": "9411",
                            "LoadBalancerPort": "9411",
                            "InstanceProtocol": "HTTP",
                            "Protocol": "HTTP"
                        }, {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }],
                "SecurityGroups": [{
                    "Ref": "EcsSecurityGroup"
                }],
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Interval": "30",
                    "Target": "HTTP:9411/",
                    "Timeout": "5",
                    "UnhealthyThreshold": "10"
                },
                "Subnets": [{
                    "Ref": "PubSubnetAz1"
                }, {
                    "Ref": "PubSubnetAz2"
                }]
            }
        },
        "OrdersDynamoDB": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "customerId",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "id",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "customerId",
                        "KeyType": "RANGE"
                    }
                ],
                "ProvisionedThroughput" : {
                    "ReadCapacityUnits" : "5",
                    "WriteCapacityUnits" : "5"
                },
                "TableName": "orders"
            }
        },
        "CatalogueRDS": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "AllocatedStorage": "100",
                "DBInstanceClass": "db.t2.medium",
                "DBName": "socksdb",
                "Engine": "MySQL",
                "MasterUsername": "catalogue_user",
                "MasterUserPassword": "default_password",
                "VPCSecurityGroups": [{
                    "Ref": "DBEC2SecurityGroup"
                }],
                "DBSubnetGroupName": {
                    "Ref": "myDBSubnetGroup"
                }
            }
        },
        "SQLImporter": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "SqlImporterAmiIds", {
                            "Ref": "AWS::Region"
                        },
                        "ImageId"
                    ]
                },
                "InstanceType": "t2.micro",
                "NetworkInterfaces": [{
                    "AssociatePublicIpAddress": "true",
                    "DeviceIndex": "0",
                    "GroupSet": [{
                        "Ref": "EcsSecurityGroup"
                    }],
                    "SubnetId": {
                        "Ref": "PubSubnetAz1"
                    }
                }],

                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "", [
                                "RDS Importer - ", {
                                    "Ref": "AWS::StackName"
                                }
                            ]
                        ]
                    }
                }],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", [
                            "#!/bin/bash -xe\n",
                            "yum update -y aws-cfn-bootstrap\n",

                            "# Install the files and packages from the metadata\n",
                            "/opt/aws/bin/cfn-init -v ",
                            "         --stack ", {
                                "Ref": "AWS::StackName"
                            },
                            "         --resource SQLImporter",
                            "         --region ", {
                                "Ref": "AWS::Region"
                            }, "\n",

                            "# Signal the status from cfn-init\n",
                            "/opt/aws/bin/cfn-signal -e $? ",
                            "         --stack ", {
                                "Ref": "AWS::StackName"
                            },
                            "         --resource SQLImporter",
                            "         --region ", {
                                "Ref": "AWS::Region"
                            }, "\n"
                        ]]
                    }
                }
            },
            "DependsOn": "CatalogueRDS",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "mysql": []
                            }
                        },
                        "commands": {
                            "get": {
                                "command": "wget https://raw.githubusercontent.com/microservices-demo/catalogue/master/docker/catalogue-db/data/dump.sql"
                            },
                            "import": {
                                "command": "mysql -u catalogue_user --password=default_password -h $SOCKS_DB -f -D socksdb < dump.sql ",
                                "env": {
                                    "SOCKS_DB": {
                                        "Fn::GetAtt": ["CatalogueRDS", "Endpoint.Address"]
                                    }
                                }
                            }

                        }
                    }
                }
            }
        },
        "EcsScopeApplicationLoadBalancing": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "DependsOn": "InternetGateway",
            "Properties": {
                "SecurityGroups": [
                {
                    "Ref": "EcsSecurityGroup"
                }
                ],
                "Subnets": [
                {
                    "Ref": "PubSubnetAz1"
                },
                {
                    "Ref": "PubSubnetAz2"
                }
                ]
            }
        },
        "EcsScopeApplicationLoadBalancerListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [{
                    "Type": "forward",
                    "TargetGroupArn": { "Ref": "EcsScopeTargetGroup" }
                }],
                "LoadBalancerArn": { "Ref": "EcsScopeApplicationLoadBalancing" },
                "Port": 80,
                "Protocol": "HTTP"
            }
        },
        "EcsScopeTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Name": "Scope-Target-Group",
                "Port": 4040,
                "Protocol": "HTTP",
                "VpcId": { "Ref" : "Vpc" }
            },
            "DependsOn": [ "EcsScopeApplicationLoadBalancing" ]
        },
        "DBEC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Open database for access",
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": "3306",
                    "ToPort": "3306",
                    "SourceSecurityGroupId": {
                        "Ref": "EcsSecurityGroup"
                    }
                }],
                "VpcId": {
                    "Ref": "Vpc"
                }

            }
        },
        "myDBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "description",
                "SubnetIds": [{
                    "Ref": "PubSubnetAz1"
                }, {
                    "Ref": "PubSubnetAz2"
                }]
            }
        }
    }
}
