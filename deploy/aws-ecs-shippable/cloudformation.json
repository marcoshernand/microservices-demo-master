{
  "AWSTemplateFormatVersion" :"2010-09-09",
  "Description": "Weave-enabled AWS CloudFormation template to create resources required to run tasks on an ECS cluster.",
  "Outputs": {
    "AppFrontend": {
      "Condition": "DoDeployExampleApp",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "EcsFrontendElasticLoadBalancing",
                "DNSName"
              ]
            },
            ":80"
          ]
        ]
      },
      "Description": "App frontend"
    },
    "WeaveScope": {
      "Condition": "UseWeaveScopeStandalone",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "EcsFrontendElasticLoadBalancing",
                "DNSName"
              ]
            },
            ":4040"
          ]
        ]
      },
      "Description": "Weave Scope UI"
    }
  },
  "Mappings": {
    "VpcCidrs": {
      "vpc": {
        "cidr": "172.31.0.0/16"
      },
      "pubsubnet1": {
        "cidr": "172.31.0.0/24"
      },
      "pubsubnet2": {
        "cidr": "172.31.1.0/24"
      }
    },
    "WeaveworksEcsAmiIds": {
      "us-east-1": {
        "ImageId": "ami-1924770e"
      },
      "us-east-2": {
        "ImageId": "ami-bd3e64d8"
      },
      "us-west-1": {
        "ImageId": "ami-7f004b1f"
      },
      "us-west-2": {
        "ImageId": "ami-56ed4936"
      },
      "eu-west-1": {
        "ImageId": "ami-c8337dbb"
      },
      "eu-central-1": {
        "ImageId": "ami-dd12ebb2"
      },
      "ap-northeast-1": {
        "ImageId": "ami-c8b016a9"
      },
      "ap-southeast-1": {
        "ImageId": "ami-6d22840e"
      },
      "ap-southeast-2": {
        "ImageId": "ami-73407d10"
      }
    }
  },
  "Parameters": {
    "EcsInstanceType": {
      "Type": "String",
      "Description": "Type of the EC2 instance(s) to deploy",
      "Default": "t2.medium",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "Scale": {
      "Type": "Number",
      "Description": "Size of ECS cluster",
      "Default": "4"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances (if none appear in drop-down menu, you need to create one)",
      "MinLength": "1",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "DeployExampleApp": {
      "Type": "String",
      "Description": "No: only Weave Net/Scope net will be deployed, Yes: also deploy microservices demo app",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "ConstraintDescription": "must be Yes or No"
    },
    "WeaveCloudServiceToken": {
      "Type": "String",
      "Description": "Optional - Authentication token for Weave Cloud [https://cloud.weave.works/]. Leave empty to run Scope in Standalone Mode.",
      "Default": ""
    }
  },
  "Conditions": {
    "DoDeployExampleApp": {
      "Fn::Equals": [
        {
          "Ref": "DeployExampleApp"
        },
        "Yes"
      ]
    },
    "UseWeaveScopeStandalone": {
      "Fn::Equals": [
        {
          "Ref": "WeaveCloudServiceToken"
        },
        ""
      ]
    }
  },
  "Resources": {
    "SockShopALB": {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Name" : "SockShopALB",
        "Scheme" : "internet-facing",
        "LoadBalancerAttributes" : [
          { "Key" : "idle_timeout.timeout_seconds", "Value" : "30" }
        ],
        "SecurityGroups" : [ { "Ref": "EcsSecurityGroup" } ],
        "Subnets" : [ {"Ref": "PubSubnetAz1" }, {"Ref": "PubSubnetAz2"} ]
      }
    },
    "ALBListener80": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "frontendPRODTG" }
        }],
        "LoadBalancerArn": { "Ref": "SockShopALB" },
        "Port": "80",
        "Protocol": "HTTP"
      }
    },
    "ALBListener8080": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "frontendTESTTG" }
        }],
        "LoadBalancerArn": { "Ref": "SockShopALB" },
        "Port": "8080",
        "Protocol": "HTTP"
      }
    },
    "frontendPRODListenerRule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Actions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "frontendPRODTG" }
        }],
        "Conditions": [{
          "Field": "path-pattern",
          "Values": [ "/" ]
        }],
        "ListenerArn": { "Ref": "ALBListener80" },
        "Priority": 1
      }
    },
    "frontendTESTListenerRule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Actions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "frontendTESTTG" }
        }],
        "Conditions": [{
          "Field": "path-pattern",
          "Values": [ "/" ]
        }],
        "ListenerArn": { "Ref": "ALBListener8080" },
        "Priority": 1
      }
    },
    "frontendTESTTG" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : 30,
        "HealthCheckPath" : "/",
        "HealthCheckProtocol" : "HTTP",
        "HealthCheckTimeoutSeconds" : 5,
        "HealthyThresholdCount" : 5,
        "Name" : "frontendTESTTG",
        "Port" : 8080,
        "Protocol" : "HTTP",
        "UnhealthyThresholdCount" : 5,
        "TargetGroupAttributes" : [
          {
            "Key" : "deregistration_delay.timeout_seconds",
            "Value" : 5
          }
        ],
        "VpcId" : { "Ref": "Vpc" }
      }
    },
    "frontendPRODTG" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : 30,
        "HealthCheckPath" : "/",
        "HealthCheckProtocol" : "HTTP",
        "HealthCheckTimeoutSeconds" : 5 ,
        "HealthyThresholdCount" : 5,
        "Name" : "frontendPRODTG",
        "Port" : 80,
        "Protocol" : "HTTP",
        "UnhealthyThresholdCount" : 5,
        "TargetGroupAttributes" : [
          {
            "Key" : "deregistration_delay.timeout_seconds",
            "Value" : 5
          }
        ],
        "VpcId" : { "Ref": "Vpc" }
      }
    },
    "ECSServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                      "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                      "elasticloadbalancing:DeregisterTargets",
                      "elasticloadbalancing:Describe*",
                      "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                      "elasticloadbalancing:RegisterTargets",
                      "ec2:Describe*",
                      "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "EcsCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties" : {
        "ClusterName" : "ecs-weave-shippable-demo"
      }
    },
    "EcrRepo": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName" : "front-end"
      }
    },
    "AccountsDBTask": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "mongo",
            "Name": "accounts-db",
            "Memory": 256
          }
        ],
        "Volumes": []
      }
    },
    "AccountsDBService": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "AccountsDBTask"
        }
      }
    },
    "AccountsTask": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "weaveworksdemos/accounts",
            "Name": "accounts",
            "Memory": 512
          }
        ],
        "Volumes": []
      }
    },
    "AccountsService": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "AccountsTask"
        }
      }
    },
    "CartDBTask": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "mongo",
            "Name": "carts-db",
            "Memory": 256
          }
        ],
        "Volumes": []
      }
    },
    "CartDBService": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "CartDBTask"
        }
      }
    },
    "CartTask": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "weaveworksdemos/cart",
            "Name": "cart",
            "Memory": 512
          }
        ],
        "Volumes": []
      }
    },
    "CartService": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "CartTask"
        }
      }
    },
    "CatalogueTask": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "weaveworksdemos/catalogue",
            "Name": "catalogue",
            "Memory": 512
          }
        ],
        "Volumes": []
      }
    },
    "CatalogueService": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "CatalogueTask"
        }
      }
    },
    "CatalogueDBTask": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "weaveworksdemos/catalogue-db",
            "Name": "catalogue-db",
            "Memory": 256,
            "Environment": [
              {
                "Name": "MYSQL_ROOT_PASSWORD",
                "Value": "fake_password"
              },
              {
                "Name": "MYSQL_DATABASE",
                "Value": "socksdb"
              }
            ]
          }
        ],
        "Volumes": []
      }
    },
    "CatalogueDBService": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "CatalogueDBTask"
        }
      }
    },
    "LoginTask": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "weaveworksdemos/login",
            "Name": "login",
            "Memory": 512
          }
        ],
        "Volumes": []
      }
    },
    "LoginService": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "LoginTask"
        }
      }
    },
    "UserTask": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "weaveworksdemos/user",
            "Name": "user",
            "Memory": 512
          }
        ],
        "Volumes": []
      }
    },
    "UserService": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "UserTask"
        }
      }
    },
    "UserDBTask": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "weaveworksdemos/user-db",
            "Name": "user-db",
            "Memory": 256
          }
        ],
        "Volumes": []
      }
    },
    "UserDBService": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "UserDBTask"
        }
      }
    },
    "OrdersDBTask": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "mongo",
            "Name": "orders-db",
            "Memory": 256
          }
        ],
        "Volumes": []
      }
    },
    "OrdersDBService": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "OrdersDBTask"
        }
      }
    },
    "OrdersTask": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "weaveworksdemos/orders",
            "Name": "orders",
            "Memory": 512
          }
        ],
        "Volumes": []
      }
    },
    "OrdersService": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "OrdersTask"
        }
      }
    },
    "PaymentTask": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "weaveworksdemos/payment",
            "Name": "payment",
            "Memory": 512
          }
        ],
        "Volumes": []
      }
    },
    "PaymentService": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "PaymentTask"
        }
      }
    },
    "QueueMasterTask": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "weaveworksdemos/queue-master",
            "Name": "queue-master",
            "Memory": 256,
            "MountPoints": [
              {
                "ContainerPath": "/var/run/docker.sock",
                "SourceVolume": "VarRunDocker_Sock"
              }
            ]
          }
        ],
        "Volumes": [
          {
            "Host": {
              "SourcePath": "/var/run/docker.sock"
            },
            "Name": "VarRunDocker_Sock"
          }
        ]
      }
    },
    "QueueMasterService": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "QueueMasterTask"
        }
      }
    },
    "RabbitMQTask": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "rabbitmq:3.6.8",
            "Name": "rabbitmq",
            "Memory": 256
          }
        ],
        "Volumes": []
      }
    },
    "RabbitMQService": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "RabbitMQTask"
        }
      }
    },
    "ShippingTask": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "weaveworksdemos/shipping",
            "Name": "shipping",
            "Memory": 512
          }
        ],
        "Volumes": []
      }
    },
    "ShippingService": {
      "Condition": "DoDeployExampleApp",
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": 1,
        "TaskDefinition": {
          "Ref": "ShippingTask"
        }
      }
    },
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            "vpc",
            "cidr"
          ]
        }
      }
    },
    "PubSubnetAz1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            "pubsubnet1",
            "cidr"
          ]
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }
      }
    },
    "PubSubnetAz2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            "pubsubnet2",
            "cidr"
          ]
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteViaIgw": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PublicRouteViaIgw": {
      "DependsOn": "AttachGateway",
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PubSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PubSubnetAz1"
        },
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        }
      }
    },
    "PubSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PubSubnetAz2"
        },
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        }
      }
    },
    "EcsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ECS Allowed Ports",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "EcsSecurityGroupIngressAppPort": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EcsSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "EcsSecurityGroupIngressTESTAppPort": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EcsSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "8080",
        "ToPort": "8080",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "EcsSecurityGroupIngressSshPort": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EcsSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "EcsSecurityGroupIngressWeaveScopeExtPort": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EcsSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "4040",
        "ToPort": "4040",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "EcsSecurityGroupIngressWeaveScopeIntPort": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EcsSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "4040",
        "ToPort": "4040",
        "SourceSecurityGroupId": {
          "Ref": "EcsSecurityGroup"
        }
      }
    },
    "EcsSecurityGroupIngressWeaveNetIntTcpPort": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EcsSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "6783",
        "ToPort": "6783",
        "SourceSecurityGroupId": {
          "Ref": "EcsSecurityGroup"
        }
      }
    },
    "EcsSecurityGroupIngressWeaveNetIntUdpPorts": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EcsSecurityGroup"
        },
        "IpProtocol": "udp",
        "FromPort": "6783",
        "ToPort": "6784",
        "SourceSecurityGroupId": {
          "Ref": "EcsSecurityGroup"
        }
      }
    },
    "EcsSecurityGroupDynamicALBPorts": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "EcsSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "31000",
        "ToPort": "61000",
        "SourceSecurityGroupId": {
          "Ref": "EcsSecurityGroup"
        }
      }
    },
    "shippableDemoUser" : {
       "Type" : "AWS::IAM::User",
       "Properties" : {
          "Path" : "/",
          "UserName" : "shippableDemoUser",
          "LoginProfile" : {
             "Password" : "myP@ssW0rd"
          },
          "Policies" : [ {
             "PolicyName" : "shippableEcrPushPull",
             "PolicyDocument" : {
               "Version": "2012-10-17",
               "Statement": [
                 {
                   "Effect": "Allow",
                   "Action": [
                     "ecr:BatchGetImage",
                     "ecr:GetDownloadUrlForLayer",
                     "ecr:InitiateLayerUpload",
                     "ecr:UploadLayerPart",
                     "ecr:CompleteLayerUpload",
                     "ecr:BatchCheckLayerAvailability",
                     "ecr:PutImage",
                     "ecr:GetAuthorizationToken",
                     "ecr:GetRepositoryPolicy",
                     "ecr:DescribeRepositories",
                     "ecr:ListImages"
                   ],
                   "Resource": "*"
                 }
               ]
             },
          },
          {
             "PolicyName" : "shippableEcsDeploy",
             "PolicyDocument" : {
               "Version": "2012-10-17",
               "Statement": [
                 {
                   "Effect": "Allow",
                   "Action": [
                     "elasticloadbalancing:ConfigureHealthCheck",
                     "elasticloadbalancing:DescribeLoadBalancers",
                     "elasticloadbalancing:DeleteLoadBalancerListeners",
                     "elasticloadbalancing:CreateLoadBalancerListeners",
                     "iam:ListServerCertificates",
                     "iam:ListRoles",
                     "iam:PassRole",
                     "ec2:DescribeRegions",
                     "ec2:DescribeInstances",
                     "ecs:DescribeClusters",
                     "ecs:ListClusters",
                     "ecs:RegisterTaskDefinition",
                     "ecs:DeregisterTaskDefinition",
                     "ecs:ListTaskDefinitions",
                     "ecs:DescribeServices",
                     "ecs:UpdateService",
                     "ecs:DeleteService",
                     "ecs:CreateService",
                     "ecs:ListTasks",
                     "ecs:ListContainerInstances",
                     "ecs:DescribeContainerInstances",
                     "ecs:ListServices",
                     "ecs:DescribeTasks"
                   ],
                   "Resource": "*"
                 }
               ]
             },
          } ]
       }
    },
    "EcsInstancePolicy": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        ],
        "Policies": [
          {
            "PolicyName": "ClusterInstanceRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:Submit*",
                    "ecs:ListClusters",
                    "ecs:ListContainerInstances",
                    "ecs:DescribeContainerInstances",
                    "ec2:DescribeInstances",
                    "ec2:DescribeTags",
                    "autoscaling:DescribeAutoScalingInstances",
                    "ecr:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "EcsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EcsInstancePolicy"
          }
        ]
      }
    },
    "EcsInstanceLc": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "WeaveworksEcsAmiIds",
            {
              "Ref": "AWS::Region"
            },
            "ImageId"
          ]
        },
        "InstanceType": {
          "Ref": "EcsInstanceType"
        },
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": {
          "Ref": "EcsInstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "EcsSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash -ex",
                "yum install -y aws-cfn-bootstrap",
                {
                  "Fn::Join": [
                    " ",
                    [
                      "/opt/aws/bin/cfn-init",
                      "--verbose",
                      "--stack",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "--region",
                      {
                        "Ref": "AWS::Region"
                      },
                      "--resource",
                      "EcsInstanceLc"
                    ]
                  ]
                }
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "jq": []
              },
              "python": {
                "awscli": []
              }
            },
            "files": {
              "/etc/ecs/ecs.config": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "ECS_CLUSTER=",
                      {
                        "Ref": "EcsCluster"
                      }
                    ]
                  ]
                }
              },
              "/etc/weave/scope.config": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::If": [
                          "UseWeaveScopeStandalone",
                          "## SERVICE_TOKEN=",
                          "SERVICE_TOKEN="
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseWeaveScopeStandalone",
                          "<unset>",
                          {
                            "Ref": "WeaveCloudServiceToken"
                          }
                        ]
                      }
                    ]
                  ]
                }
              },
              "/etc/init/ecs.override": {
                "source": "https://raw.github.com/weaveworks/integrations/master/aws/ecs/packer/to-upload/ecs.override"
              },
              "/etc/init/weave.conf": {
                "source": "https://raw.github.com/weaveworks/integrations/master/aws/ecs/packer/to-upload/weave.conf"
              },
              "/etc/init/scope.conf": {
                "source": "https://raw.github.com/weaveworks/integrations/master/aws/ecs/packer/to-upload/scope.conf"
              },
              "/etc/weave/run.sh": {
                "source": "https://raw.github.com/weaveworks/integrations/master/aws/ecs/packer/to-upload/run.sh",
                "mode": "000755"
              },
              "/etc/weave/peers.sh": {
                "source": "https://raw.github.com/weaveworks/integrations/master/aws/ecs/packer/to-upload/peers.sh",
                "mode": "000755"
              },
              "/usr/local/bin/weave": {
                "source": {
                  "Fn::Join": [
                    "/",
                    [
                      "https://github.com/weaveworks/weave/releases/download",
                      "v1.8.0",
                      "weave"
                    ]
                  ]
                },
                "mode": "000755"
              },
              "/usr/local/bin/scope": {
                "source": {
                  "Fn::Join": [
                    "/",
                    [
                      "https://github.com/weaveworks/scope/releases/download",
                      "v1.0.0",
                      "scope"
                    ]
                  ]
                },
                "mode": "000755"
              }
            }
          }
        }
      }
    },
    "EcsInstanceAsg": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Fn::Join": [
              ",",
              [
                {
                  "Ref": "PubSubnetAz1"
                },
                {
                  "Ref": "PubSubnetAz2"
                }
              ]
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "EcsInstanceLc"
        },
        "MinSize": "1",
        "MaxSize": {
          "Ref": "Scale"
        },
        "DesiredCapacity": {
          "Ref": "Scale"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "ECS Instance - ",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "EcsFrontendElasticLoadBalancing": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn": "InternetGateway",
      "Properties": {
        "Listeners": [
          {
            "Fn::If": [
              "DoDeployExampleApp",
              {
                "InstancePort": "80",
                "LoadBalancerPort": "80",
                "InstanceProtocol": "HTTP",
                "Protocol": "HTTP"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "UseWeaveScopeStandalone",
              {
                "InstancePort": "4040",
                "LoadBalancerPort": "4040",
                "InstanceProtocol": "TCP",
                "Protocol": "TCP"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "EcsSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "PubSubnetAz1"
          },
          {
            "Ref": "PubSubnetAz2"
          }
        ]
      }
    }
},
"Outputs": {
    "ecscluster": {
      "Description": "Your ECS cluster name",
      "Value": {
          "Ref": "EcsCluster"
        }
    },
    "EcrRepo": {
      "Description": "Your ECR Repository URL",
      "Value": {
        "Fn::Join": [
          "",
          [
          { "Ref" : "AWS::AccountId" },
            ".dkr.ecr.",
            { "Ref" : "AWS::Region" },
            ".amazonaws.com/front-end"
          ]
        ]
      }
    },
    "TargetGroupARNTest": {
      "Description": "Your TargetGroupArn for front-end TEST environment",
      "Value": {
          "Ref": "frontendTESTTG"
      }
    },
    "TargetGroupARNProd": {
      "Description": "Your TargetGroupArn for front-end PROD environment",
      "Value": {
          "Ref": "frontendPRODTG"
      }
    },
    "ProdALB": {
      "Description": "URL for front-end PROD environment",
      "Value": {
          "Fn::Join": [
              "", [

                  {
                      "Fn::GetAtt": [
                          "SockShopALB",
                          "DNSName"
                      ]
                  },
                  ":80"
              ]
          ]
      }
    },
    "TestALB": {
      "Description": "URL for front-end TEST environment",
      "Value": {
          "Fn::Join": [
              "", [

                  {
                      "Fn::GetAtt": [
                          "SockShopALB",
                          "DNSName"
                      ]
                  },
                  ":8080"
              ]
          ]
      }
    }
}
}
